(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/fire/auth'), require('firebaseui'), require('firebase/app'), require('firebase/auth'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('firebaseui-angular', ['exports', '@angular/core', '@angular/fire/auth', 'firebaseui', 'firebase/app', 'firebase/auth', '@angular/common'], factory) :
    (factory((global['firebaseui-angular'] = {}),global.ng.core,global.ng.fire.auth,global.firebaseui,global.firebase,null,global.ng.common));
}(this, (function (exports,i0,i1,firebaseui,firebase,auth,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FirebaseuiAngularLibraryService = /** @class */ (function () {
        function FirebaseuiAngularLibraryService(angularFireAuth) {
            // store the firebaseui instance on the window object to prevent double initialization
            if (!(( /** @type {?} */(window))).firebaseUiInstance) {
                (( /** @type {?} */(window))).firebaseUiInstance = new firebaseui.auth.AuthUI(angularFireAuth.auth);
            }
            this.firebaseUiInstance = ( /** @type {?} */((( /** @type {?} */(window))).firebaseUiInstance));
        }
        FirebaseuiAngularLibraryService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FirebaseuiAngularLibraryService.ctorParameters = function () {
            return [
                { type: i1.AngularFireAuth }
            ];
        };
        /** @nocollapse */ FirebaseuiAngularLibraryService.ngInjectableDef = i0.defineInjectable({ factory: function FirebaseuiAngularLibraryService_Factory() { return new FirebaseuiAngularLibraryService(i0.inject(i1.AngularFireAuth)); }, token: FirebaseuiAngularLibraryService, providedIn: "root" });
        return FirebaseuiAngularLibraryService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var firebase$1 = firebase;
    /** @type {?} */
    var firebaseui$1 = firebaseui;
    /**
     * @deprecated Please use native configuration of firebaseui (firebaseui.auth.Config)
     */
    var /**
     * @deprecated Please use native configuration of firebaseui (firebaseui.auth.Config)
     */ FirebaseUIAuthConfig = /** @class */ (function () {
        function FirebaseUIAuthConfig() {
        }
        return FirebaseUIAuthConfig;
    }());
    var FirebaseUISignInSuccessWithAuthResult = /** @class */ (function () {
        function FirebaseUISignInSuccessWithAuthResult() {
        }
        return FirebaseUISignInSuccessWithAuthResult;
    }());
    var FirebaseUISignInFailure = /** @class */ (function () {
        function FirebaseUISignInFailure() {
        }
        return FirebaseUISignInFailure;
    }());
    /**
     * @deprecated Use {\@link FirebaseUISignInSuccessWithAuthResult}
     */
    var /**
     * @deprecated Use {\@link FirebaseUISignInSuccessWithAuthResult}
     */ FirebaseUISignInSuccess = /** @class */ (function () {
        function FirebaseUISignInSuccess() {
        }
        return FirebaseUISignInSuccess;
    }());
    /** @enum {number} */
    var CredentialHelper = {
        AccountChooser: 0, OneTap: 1, None: 2,
    };
    CredentialHelper[CredentialHelper.AccountChooser] = 'AccountChooser';
    CredentialHelper[CredentialHelper.OneTap] = 'OneTap';
    CredentialHelper[CredentialHelper.None] = 'None';
    /** @enum {number} */
    var AuthProvider = {
        Google: 0, Facebook: 1, Twitter: 2, Github: 3, Password: 4, Phone: 5,
    };
    AuthProvider[AuthProvider.Google] = 'Google';
    AuthProvider[AuthProvider.Facebook] = 'Facebook';
    AuthProvider[AuthProvider.Twitter] = 'Twitter';
    AuthProvider[AuthProvider.Github] = 'Github';
    AuthProvider[AuthProvider.Password] = 'Password';
    AuthProvider[AuthProvider.Phone] = 'Phone';
    /** @enum {number} */
    var AuthMethods = {
        Popup: 0, Redirect: 1,
    };
    AuthMethods[AuthMethods.Popup] = 'Popup';
    AuthMethods[AuthMethods.Redirect] = 'Redirect';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var GoogleAuthProvider = firebase.auth.GoogleAuthProvider;
    var FacebookAuthProvider = firebase.auth.FacebookAuthProvider;
    var TwitterAuthProvider = firebase.auth.TwitterAuthProvider;
    var GithubAuthProvider = firebase.auth.GithubAuthProvider;
    var EmailAuthProvider = firebase.auth.EmailAuthProvider;
    var PhoneAuthProvider = firebase.auth.PhoneAuthProvider;
    var FirebaseuiAngularLibraryComponent = /** @class */ (function () {
        function FirebaseuiAngularLibraryComponent(angularFireAuth, _firebaseUiConfig, _firebaseUiConfig_Feature, ngZone, firebaseUIService) {
            this.angularFireAuth = angularFireAuth;
            this._firebaseUiConfig = _firebaseUiConfig;
            this._firebaseUiConfig_Feature = _firebaseUiConfig_Feature;
            this.ngZone = ngZone;
            this.firebaseUIService = firebaseUIService;
            /**
             * @deprecated Use signInSuccessWithAuthResult
             */
            this.signInSuccessCallback = new i0.EventEmitter(); // tslint:disable-line
            // tslint:disable-line
            this.signInSuccessWithAuthResultCallback = new i0.EventEmitter(); // tslint:disable-line
            // tslint:disable-line
            this.signInFailureCallback = new i0.EventEmitter(); // tslint:disable-line
        }
        /**
         * @param {?} provider
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.getAuthProvider = /**
         * @param {?} provider
         * @return {?}
         */
            function (provider) {
                switch (provider) {
                    case AuthProvider.Google:
                        return GoogleAuthProvider.PROVIDER_ID;
                    case AuthProvider.Facebook:
                        return FacebookAuthProvider.PROVIDER_ID;
                    case AuthProvider.Twitter:
                        return TwitterAuthProvider.PROVIDER_ID;
                    case AuthProvider.Github:
                        return GithubAuthProvider.PROVIDER_ID;
                    case AuthProvider.Password:
                        return EmailAuthProvider.PROVIDER_ID;
                    case AuthProvider.Phone:
                        return PhoneAuthProvider.PROVIDER_ID;
                }
            };
        Object.defineProperty(FirebaseuiAngularLibraryComponent.prototype, "firebaseUiConfig", {
            get: /**
             * @return {?}
             */ function () {
                return ( /** @type {?} */(__assign({}, this._firebaseUiConfig, this._firebaseUiConfig_Feature)));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subscription = this.angularFireAuth.authState.subscribe(function (value) {
                    if ((value && value.isAnonymous) || !value) {
                        if ((( /** @type {?} */(_this.firebaseUiConfig))).providers) {
                            // tslint:disable-next-line
                            console.warn("\"FirebaseUIAuthConfig\" isn't supported since version 3.3.0 and will be removed in the future.\nPlease use the native configuration of firebaseui \"firebaseui.auth.Config\"");
                            console.warn('You can copy your converted configuration:\n', _this.getNewConfigurationString(_this.getUIAuthConfig()));
                            if ((( /** @type {?} */(_this.firebaseUiConfig))).providers.length !== 0) {
                                _this.firebaseUIPopup();
                            }
                            else {
                                throw new Error('There must be at least one AuthProvider.');
                            }
                        }
                        else {
                            if ((( /** @type {?} */(_this.firebaseUiConfig))).signInOptions.length !== 0) {
                                _this.firebaseUIPopup();
                            }
                            else {
                                throw new Error('There must be at least one AuthProvider.');
                            }
                        }
                    }
                });
            };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (!!this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.getUIAuthConfig = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var e_1, _a;
                if (!(( /** @type {?} */(this.firebaseUiConfig))).providers) {
                    if (!(( /** @type {?} */(this.firebaseUiConfig))).callbacks) {
                        this._firebaseUiConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS] = true;
                        (( /** @type {?} */(this._firebaseUiConfig))).callbacks = this.getCallbacks();
                    }
                    return (( /** @type {?} */(this.firebaseUiConfig)));
                }
                /** @type {?} */
                var authConfig = (( /** @type {?} */(this.firebaseUiConfig)));
                /** @type {?} */
                var authProviders = [];
                try {
                    for (var _b = __values(authConfig.providers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var provider = _c.value;
                        if (!!(( /** @type {?} */(provider))).customConfig) {
                            provider = (( /** @type {?} */(provider)));
                            /** @type {?} */
                            var providerWithConfig = provider.customConfig;
                            providerWithConfig['provider'] = FirebaseuiAngularLibraryComponent.getAuthProvider(provider.provider);
                            authProviders.push(providerWithConfig);
                        }
                        else {
                            authProviders.push(FirebaseuiAngularLibraryComponent.getAuthProvider(( /** @type {?} */(provider))));
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                /** @type {?} */
                var tosURL = authConfig.tos ? authConfig.tos : '';
                /** @type {?} */
                var privacyPolicyUrl = authConfig.privacyPolicyUrl ? authConfig.privacyPolicyUrl : '';
                /** @type {?} */
                var authMethod = 'popup';
                switch (authConfig.method) {
                    case AuthMethods.Redirect:
                        authMethod = 'redirect';
                        break;
                    case null:
                    case AuthMethods.Popup:
                    default:
                        break;
                }
                /** @type {?} */
                var credentialHelper;
                switch (authConfig.credentialHelper) {
                    case CredentialHelper.None:
                        credentialHelper = firebaseui.auth.CredentialHelper.NONE;
                        break;
                    case CredentialHelper.OneTap:
                        credentialHelper = firebaseui.auth.CredentialHelper.GOOGLE_YOLO;
                        break;
                    case CredentialHelper.AccountChooser:
                    default:
                        credentialHelper = firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM;
                        break;
                }
                /** @type {?} */
                var autoUpgradeAnonymousUsers = authConfig.autoUpgradeAnonymousUsers == null ? false : authConfig.autoUpgradeAnonymousUsers;
                /** @type {?} */
                var signInSuccessCallback = function (currentUser, credential, redirectUrl) {
                    _this.ngZone.run(function () {
                        _this.signInSuccessCallback.emit({
                            currentUser: currentUser,
                            credential: credential,
                            redirectUrl: redirectUrl
                        });
                    });
                    return !!authConfig.signInSuccessUrl;
                };
                /** @type {?} */
                var callbacks = __assign({}, this.getCallbacks(), { signInSuccess: null });
                if (!authConfig.disableSignInSuccessCallback) {
                    console.warn('[FirebaseUiAngular] signInSuccess callback is deprecated. Please use signInSuccessWithAuthResult callback instead.\n' +
                        'To remove this warning set disableSignInSuccessCallback on the FirebaseUiConfig Object.');
                    callbacks.signInSuccess = signInSuccessCallback;
                }
                /** @type {?} */
                var nativeConfiguration = {
                    callbacks: callbacks,
                    signInFlow: authMethod,
                    signInOptions: authProviders,
                    tosUrl: tosURL,
                    privacyPolicyUrl: privacyPolicyUrl,
                    credentialHelper: credentialHelper,
                    autoUpgradeAnonymousUsers: autoUpgradeAnonymousUsers
                };
                if (!!authConfig.signInSuccessUrl) {
                    nativeConfiguration.signInSuccessUrl = authConfig.signInSuccessUrl;
                }
                return nativeConfiguration;
            };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.firebaseUIPopup = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
                /** @type {?} */
                var uiAuthConfig = this.getUIAuthConfig();
                // Check if callbacks got computed to reset them again after providing the to firebaseui.
                // Necessary for allowing updating the firebaseui config during runtime.
                /** @type {?} */
                var resetCallbacks = false;
                if (uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS]) {
                    resetCallbacks = true;
                    delete uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS];
                }
                // show the firebaseui
                firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);
                if (resetCallbacks) {
                    (( /** @type {?} */(this._firebaseUiConfig))).callbacks = null;
                }
            };
        /**
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.getCallbacks = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var signInSuccessWithAuthResult = function (authResult, redirectUrl) {
                    _this.ngZone.run(function () {
                        _this.signInSuccessWithAuthResultCallback.emit({
                            authResult: authResult,
                            redirectUrl: redirectUrl
                        });
                    });
                    return _this.firebaseUiConfig.signInSuccessUrl;
                };
                /** @type {?} */
                var signInFailureCallback = function (error) {
                    _this.ngZone.run(function () {
                        _this.signInFailureCallback.emit({
                            code: error.code,
                            credential: error.credential
                        });
                    });
                    return Promise.reject();
                };
                return {
                    signInSuccessWithAuthResult: signInSuccessWithAuthResult,
                    signInFailure: signInFailureCallback,
                };
            };
        /**
         * @param {?} configuration
         * @return {?}
         */
        FirebaseuiAngularLibraryComponent.prototype.getNewConfigurationString = /**
         * @param {?} configuration
         * @return {?}
         */
            function (configuration) {
                delete configuration.callbacks;
                if (!configuration.autoUpgradeAnonymousUsers) {
                    delete configuration.autoUpgradeAnonymousUsers;
                }
                /** @type {?} */
                var stringifiedConfiguration = JSON.stringify(configuration, null, 2);
                /* tslint:disable */
                stringifiedConfiguration = stringifiedConfiguration.replace('"credentialHelper": "accountchooser.com"', '"credentialHelper": firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM');
                stringifiedConfiguration = stringifiedConfiguration.replace('"credentialHelper": "googleyolo"', '"credentialHelper": firebaseui.auth.CredentialHelper.GOOGLE_YOLO');
                stringifiedConfiguration = stringifiedConfiguration.replace('"credentialHelper": "none"', '"credentialHelper": firebaseui.auth.CredentialHelper.NONE');
                stringifiedConfiguration = stringifiedConfiguration.replace('"provider": "google.com"', '"provider": firebase.auth.GoogleAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"provider": "facebook.com"', '"provider": firebase.auth.FacebookAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"provider": "twitter.com"', '"provider": firebase.auth.TwitterAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"provider": "github.com"', '"provider": firebase.auth.GithubAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"provider": "password"', '"provider": firebase.auth.EmailAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"provider": "phone"', '"provider": firebase.auth.PhoneAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"google.com"', 'firebase.auth.GoogleAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"facebook.com"', 'firebase.auth.FacebookAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"twitter.com"', 'firebase.auth.TwitterAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"github.com"', 'firebase.auth.TwitterAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"password"', 'firebase.auth.EmailAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace('"phone"', 'firebase.auth.PhoneAuthProvider.PROVIDER_ID');
                stringifiedConfiguration = stringifiedConfiguration.replace(/"([a-zA-Z0-9]*)": (.*)/g, '$1: $2');
                stringifiedConfiguration = stringifiedConfiguration.replace(/"/g, '\'');
                /* tslint:enable */
                return stringifiedConfiguration;
            };
        FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';
        FirebaseuiAngularLibraryComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'firebase-ui',
                        template: '<div id="firebaseui-auth-container"></div>'
                    }] }
        ];
        /** @nocollapse */
        FirebaseuiAngularLibraryComponent.ctorParameters = function () {
            return [
                { type: i1.AngularFireAuth },
                { type: undefined, decorators: [{ type: i0.Inject, args: ['firebaseUIAuthConfig',] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: ['firebaseUIAuthConfigFeature',] }] },
                { type: i0.NgZone },
                { type: FirebaseuiAngularLibraryService }
            ];
        };
        FirebaseuiAngularLibraryComponent.propDecorators = {
            signInSuccessCallback: [{ type: i0.Output, args: ['signInSuccess',] }],
            signInSuccessWithAuthResultCallback: [{ type: i0.Output, args: ['signInSuccessWithAuthResult',] }],
            signInFailureCallback: [{ type: i0.Output, args: ['signInFailure',] }]
        };
        return FirebaseuiAngularLibraryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FirebaseUIModule = /** @class */ (function () {
        function FirebaseUIModule() {
        }
        /**
         * @param {?} firebaseUiAuthConfig
         * @return {?}
         */
        FirebaseUIModule.forRoot = /**
         * @param {?} firebaseUiAuthConfig
         * @return {?}
         */
            function (firebaseUiAuthConfig) {
                return {
                    ngModule: FirebaseUIModule,
                    providers: [
                        { provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig },
                        { provide: 'firebaseUIAuthConfigFeature', useValue: {} }
                    ]
                };
            };
        /**
         * @param {?} firebaseUIAuthConfig
         * @return {?}
         */
        FirebaseUIModule.forFeature = /**
         * @param {?} firebaseUIAuthConfig
         * @return {?}
         */
            function (firebaseUIAuthConfig) {
                return {
                    ngModule: FirebaseUIModule,
                    providers: [
                        { provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig }
                    ]
                };
            };
        FirebaseUIModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [FirebaseuiAngularLibraryComponent],
                        exports: [FirebaseuiAngularLibraryComponent]
                    },] }
        ];
        return FirebaseUIModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.FirebaseuiAngularLibraryService = FirebaseuiAngularLibraryService;
    exports.FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent;
    exports.firebase = firebase$1;
    exports.firebaseui = firebaseui$1;
    exports.FirebaseUIAuthConfig = FirebaseUIAuthConfig;
    exports.FirebaseUISignInSuccessWithAuthResult = FirebaseUISignInSuccessWithAuthResult;
    exports.FirebaseUISignInFailure = FirebaseUISignInFailure;
    exports.FirebaseUISignInSuccess = FirebaseUISignInSuccess;
    exports.CredentialHelper = CredentialHelper;
    exports.AuthProvider = AuthProvider;
    exports.AuthMethods = AuthMethods;
    exports.FirebaseUIModule = FirebaseUIModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,